{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/RH-frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { toast } from 'react-toastify';\n\n// Criando o contexto de autenticação\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personalizado para usar o contexto de autenticação\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provedor do contexto de autenticação\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Função de login\n  const login = async (email, senha) => {\n    try {\n      const response = await authService.login(email, senha);\n      const {\n        user\n      } = response.data;\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      return user;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Erro ao fazer login:', error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Erro ao fazer login. Verifique suas credenciais.';\n      toast.error(errorMessage);\n      throw error;\n    }\n  };\n\n  // Função de logout\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n      // Mesmo com erro, limpar dados locais\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  // Verificar permissões do usuário\n  const hasPermission = requiredPermissions => {\n    if (!currentUser) return false;\n\n    // Verificação baseada no perfil do usuário\n    if (currentUser.perfil === 'Admin') return true;\n    if (Array.isArray(requiredPermissions)) {\n      return requiredPermissions.includes(currentUser.perfil);\n    }\n    return currentUser.perfil === requiredPermissions;\n  };\n\n  // Verificar se há um usuário armazenado ao carregar\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Verificar se há token de acesso\n        if (authService.isAuthenticated()) {\n          // Obter usuário atual do localStorage\n          const user = authService.getCurrentUser();\n          if (user) {\n            setCurrentUser(user);\n            setIsAuthenticated(true);\n          }\n        }\n      } catch (error) {\n        console.error('Erro ao verificar autenticação:', error);\n        // Em caso de erro, limpar dados de autenticação\n        await logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Valores e funções disponibilizados pelo contexto\n  const value = {\n    currentUser,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    hasPermission\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"fSs8I3rmRpj0Th9Mm1M79E+wcpY=\");\n_c = AuthProvider;\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","loading","setLoading","login","email","senha","response","user","data","error","_error$response","_error$response$data","console","errorMessage","logout","hasPermission","requiredPermissions","perfil","Array","isArray","includes","checkAuth","getCurrentUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ubuntu/RH-frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { toast } from 'react-toastify';\n\n// Criando o contexto de autenticação\nconst AuthContext = createContext();\n\n// Hook personalizado para usar o contexto de autenticação\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\n// Provedor do contexto de autenticação\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Função de login\n  const login = async (email, senha) => {\n    try {\n      const response = await authService.login(email, senha);\n      const { user } = response.data;\n      \n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      \n      return user;\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      const errorMessage = error.response?.data?.error || 'Erro ao fazer login. Verifique suas credenciais.';\n      toast.error(errorMessage);\n      throw error;\n    }\n  };\n\n  // Função de logout\n  const logout = async () => {\n    try {\n      await authService.logout();\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n      // Mesmo com erro, limpar dados locais\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  // Verificar permissões do usuário\n  const hasPermission = (requiredPermissions) => {\n    if (!currentUser) return false;\n    \n    // Verificação baseada no perfil do usuário\n    if (currentUser.perfil === 'Admin') return true;\n    \n    if (Array.isArray(requiredPermissions)) {\n      return requiredPermissions.includes(currentUser.perfil);\n    }\n    \n    return currentUser.perfil === requiredPermissions;\n  };\n\n  // Verificar se há um usuário armazenado ao carregar\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // Verificar se há token de acesso\n        if (authService.isAuthenticated()) {\n          // Obter usuário atual do localStorage\n          const user = authService.getCurrentUser();\n          \n          if (user) {\n            setCurrentUser(user);\n            setIsAuthenticated(true);\n          }\n        }\n      } catch (error) {\n        console.error('Erro ao verificar autenticação:', error);\n        // Em caso de erro, limpar dados de autenticação\n        await logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkAuth();\n  }, []);\n\n  // Valores e funções disponibilizados pelo contexto\n  const value = {\n    currentUser,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    hasPermission\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport { AuthContext };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}