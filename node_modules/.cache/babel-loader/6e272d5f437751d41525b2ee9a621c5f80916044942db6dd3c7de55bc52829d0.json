{"ast":null,"code":"import axios from 'axios';\n\n// URL base da API\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://rh-backend-production.up.railway.app/api';\n\n// Configuração do axios\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Adicionar token de autenticação em todas as requisições\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Serviços de autenticação\nexport const authService = {\n  // Login de usuário\n  login: async (email, senha) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        senha\n      });\n\n      // Armazenar tokens e dados do usuário\n      localStorage.setItem('accessToken', response.data.data.accessToken);\n      localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    }\n  },\n  // Logout de usuário\n  logout: async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        await api.post('/auth/logout', {\n          refreshToken\n        });\n      }\n\n      // Limpar dados de autenticação\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n\n      // Limpar dados mesmo em caso de erro\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      throw error;\n    }\n  },\n  // Verificar se usuário está autenticado\n  isAuthenticated: () => {\n    return !!localStorage.getItem('accessToken');\n  },\n  // Obter usuário atual\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  // Renovar token de acesso\n  refreshToken: async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('Refresh token não encontrado');\n      }\n      const response = await api.post('/auth/refresh-token', {\n        refreshToken\n      });\n\n      // Atualizar tokens\n      localStorage.setItem('accessToken', response.data.data.accessToken);\n      localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de funcionários\nexport const employeeService = {\n  // Listar funcionários\n  getEmployees: async (filters = {}) => {\n    try {\n      const response = await api.get('/employees', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar funcionários:', error);\n      throw error;\n    }\n  },\n  // Obter funcionário por ID\n  getEmployeeById: async id => {\n    try {\n      const response = await api.get(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar funcionário:', error);\n      throw error;\n    }\n  },\n  // Criar funcionário\n  createEmployee: async employeeData => {\n    try {\n      const response = await api.post('/employees', employeeData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar funcionário:', error);\n      throw error;\n    }\n  },\n  // Atualizar funcionário\n  updateEmployee: async (id, employeeData) => {\n    try {\n      const response = await api.put(`/employees/${id}`, employeeData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar funcionário:', error);\n      throw error;\n    }\n  },\n  // Excluir funcionário\n  deleteEmployee: async id => {\n    try {\n      const response = await api.delete(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir funcionário:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de departamentos\nexport const departmentService = {\n  // Listar departamentos\n  getDepartments: async () => {\n    try {\n      const response = await api.get('/departments');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar departamentos:', error);\n      throw error;\n    }\n  },\n  // Obter departamento por ID\n  getDepartmentById: async id => {\n    try {\n      const response = await api.get(`/departments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar departamento:', error);\n      throw error;\n    }\n  },\n  // Criar departamento\n  createDepartment: async departmentData => {\n    try {\n      const response = await api.post('/departments', departmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar departamento:', error);\n      throw error;\n    }\n  },\n  // Atualizar departamento\n  updateDepartment: async (id, departmentData) => {\n    try {\n      const response = await api.put(`/departments/${id}`, departmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar departamento:', error);\n      throw error;\n    }\n  },\n  // Excluir departamento\n  deleteDepartment: async id => {\n    try {\n      const response = await api.delete(`/departments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir departamento:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de cargos\nexport const positionService = {\n  // Listar cargos\n  getPositions: async () => {\n    try {\n      const response = await api.get('/positions');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar cargos:', error);\n      throw error;\n    }\n  },\n  // Obter cargo por ID\n  getPositionById: async id => {\n    try {\n      const response = await api.get(`/positions/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar cargo:', error);\n      throw error;\n    }\n  },\n  // Criar cargo\n  createPosition: async positionData => {\n    try {\n      const response = await api.post('/positions', positionData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar cargo:', error);\n      throw error;\n    }\n  },\n  // Atualizar cargo\n  updatePosition: async (id, positionData) => {\n    try {\n      const response = await api.put(`/positions/${id}`, positionData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar cargo:', error);\n      throw error;\n    }\n  },\n  // Excluir cargo\n  deletePosition: async id => {\n    try {\n      const response = await api.delete(`/positions/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir cargo:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de movimentações\nexport const movementService = {\n  // Listar movimentações\n  getMovements: async (filters = {}) => {\n    try {\n      const response = await api.get('/movements', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar movimentações:', error);\n      throw error;\n    }\n  },\n  // Obter movimentação por ID\n  getMovementById: async id => {\n    try {\n      const response = await api.get(`/movements/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar movimentação:', error);\n      throw error;\n    }\n  },\n  // Criar movimentação\n  createMovement: async movementData => {\n    try {\n      const response = await api.post('/movements', movementData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar movimentação:', error);\n      throw error;\n    }\n  },\n  // Atualizar movimentação\n  updateMovement: async (id, movementData) => {\n    try {\n      const response = await api.put(`/movements/${id}`, movementData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar movimentação:', error);\n      throw error;\n    }\n  },\n  // Excluir movimentação\n  deleteMovement: async id => {\n    try {\n      const response = await api.delete(`/movements/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir movimentação:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de tabelas salariais\nexport const salaryTableService = {\n  // Listar tabelas salariais\n  getSalaryTables: async () => {\n    try {\n      const response = await api.get('/salary-tables');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar tabelas salariais:', error);\n      throw error;\n    }\n  },\n  // Obter tabela salarial por ID\n  getSalaryTableById: async id => {\n    try {\n      const response = await api.get(`/salary-tables/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar tabela salarial:', error);\n      throw error;\n    }\n  },\n  // Criar tabela salarial\n  createSalaryTable: async salaryTableData => {\n    try {\n      const response = await api.post('/salary-tables', salaryTableData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar tabela salarial:', error);\n      throw error;\n    }\n  },\n  // Atualizar tabela salarial\n  updateSalaryTable: async (id, salaryTableData) => {\n    try {\n      const response = await api.put(`/salary-tables/${id}`, salaryTableData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar tabela salarial:', error);\n      throw error;\n    }\n  },\n  // Excluir tabela salarial\n  deleteSalaryTable: async id => {\n    try {\n      const response = await api.delete(`/salary-tables/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir tabela salarial:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de dashboard\nexport const dashboardService = {\n  // Obter estatísticas gerais\n  getStats: async () => {\n    try {\n      const response = await api.get('/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar estatísticas do dashboard:', error);\n      throw error;\n    }\n  },\n  // Obter distribuição por departamento\n  getDepartmentDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/department-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por departamento:', error);\n      throw error;\n    }\n  },\n  // Obter distribuição por cargo\n  getPositionDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/position-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por cargo:', error);\n      throw error;\n    }\n  },\n  // Obter distribuição por modalidade de trabalho\n  getWorkModeDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/workmode-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por modalidade de trabalho:', error);\n      throw error;\n    }\n  },\n  // Obter distribuição por carga horária\n  getWorkloadDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/workload-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por carga horária:', error);\n      throw error;\n    }\n  },\n  // Obter histórico de movimentações\n  getMovementHistory: async (meses = 12) => {\n    try {\n      const response = await api.get('/dashboard/movement-history', {\n        params: {\n          meses\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar histórico de movimentações:', error);\n      throw error;\n    }\n  },\n  // Obter análise salarial\n  getSalaryAnalysis: async () => {\n    try {\n      const response = await api.get('/dashboard/salary-analysis');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao carregar dados do dashboard:', error);\n      throw error;\n    }\n  },\n  // Obter comparativo de orçamento\n  getBudgetComparison: async () => {\n    try {\n      const response = await api.get('/dashboard/budget-comparison');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar comparativo de orçamento:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","authService","login","email","senha","response","post","setItem","data","accessToken","refreshToken","JSON","stringify","user","console","logout","removeItem","success","isAuthenticated","getCurrentUser","userStr","parse","Error","employeeService","getEmployees","filters","get","params","getEmployeeById","id","createEmployee","employeeData","updateEmployee","put","deleteEmployee","delete","departmentService","getDepartments","getDepartmentById","createDepartment","departmentData","updateDepartment","deleteDepartment","positionService","getPositions","getPositionById","createPosition","positionData","updatePosition","deletePosition","movementService","getMovements","getMovementById","createMovement","movementData","updateMovement","deleteMovement","salaryTableService","getSalaryTables","getSalaryTableById","createSalaryTable","salaryTableData","updateSalaryTable","deleteSalaryTable","dashboardService","getStats","getDepartmentDistribution","getPositionDistribution","getWorkModeDistribution","getWorkloadDistribution","getMovementHistory","meses","getSalaryAnalysis","getBudgetComparison"],"sources":["/home/ubuntu/RH-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL base da API\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://rh-backend-production.up.railway.app/api';\n\n// Configuração do axios\nconst api = axios.create({\n  baseURL: API_BASE_URL\n} );\n\n// Adicionar token de autenticação em todas as requisições\napi.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n// Serviços de autenticação\nexport const authService = {\n  // Login de usuário\n  login: async (email, senha) => {\n    try {\n      const response = await api.post('/auth/login', { email, senha });\n      \n      // Armazenar tokens e dados do usuário\n      localStorage.setItem('accessToken', response.data.data.accessToken);\n      localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    }\n  },\n  \n  // Logout de usuário\n  logout: async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      \n      if (refreshToken) {\n        await api.post('/auth/logout', { refreshToken });\n      }\n      \n      // Limpar dados de autenticação\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n      \n      // Limpar dados mesmo em caso de erro\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      \n      throw error;\n    }\n  },\n  \n  // Verificar se usuário está autenticado\n  isAuthenticated: () => {\n    return !!localStorage.getItem('accessToken');\n  },\n  \n  // Obter usuário atual\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  \n  // Renovar token de acesso\n  refreshToken: async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      \n      if (!refreshToken) {\n        throw new Error('Refresh token não encontrado');\n      }\n      \n      const response = await api.post('/auth/refresh-token', { refreshToken });\n      \n      // Atualizar tokens\n      localStorage.setItem('accessToken', response.data.data.accessToken);\n      localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de funcionários\nexport const employeeService = {\n  // Listar funcionários\n  getEmployees: async (filters = {}) => {\n    try {\n      const response = await api.get('/employees', { params: filters });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar funcionários:', error);\n      throw error;\n    }\n  },\n  \n  // Obter funcionário por ID\n  getEmployeeById: async (id) => {\n    try {\n      const response = await api.get(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar funcionário:', error);\n      throw error;\n    }\n  },\n  \n  // Criar funcionário\n  createEmployee: async (employeeData) => {\n    try {\n      const response = await api.post('/employees', employeeData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar funcionário:', error);\n      throw error;\n    }\n  },\n  \n  // Atualizar funcionário\n  updateEmployee: async (id, employeeData) => {\n    try {\n      const response = await api.put(`/employees/${id}`, employeeData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar funcionário:', error);\n      throw error;\n    }\n  },\n  \n  // Excluir funcionário\n  deleteEmployee: async (id) => {\n    try {\n      const response = await api.delete(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir funcionário:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de departamentos\nexport const departmentService = {\n  // Listar departamentos\n  getDepartments: async () => {\n    try {\n      const response = await api.get('/departments');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar departamentos:', error);\n      throw error;\n    }\n  },\n  \n  // Obter departamento por ID\n  getDepartmentById: async (id) => {\n    try {\n      const response = await api.get(`/departments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar departamento:', error);\n      throw error;\n    }\n  },\n  \n  // Criar departamento\n  createDepartment: async (departmentData) => {\n    try {\n      const response = await api.post('/departments', departmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar departamento:', error);\n      throw error;\n    }\n  },\n  \n  // Atualizar departamento\n  updateDepartment: async (id, departmentData) => {\n    try {\n      const response = await api.put(`/departments/${id}`, departmentData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar departamento:', error);\n      throw error;\n    }\n  },\n  \n  // Excluir departamento\n  deleteDepartment: async (id) => {\n    try {\n      const response = await api.delete(`/departments/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir departamento:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de cargos\nexport const positionService = {\n  // Listar cargos\n  getPositions: async () => {\n    try {\n      const response = await api.get('/positions');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar cargos:', error);\n      throw error;\n    }\n  },\n  \n  // Obter cargo por ID\n  getPositionById: async (id) => {\n    try {\n      const response = await api.get(`/positions/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar cargo:', error);\n      throw error;\n    }\n  },\n  \n  // Criar cargo\n  createPosition: async (positionData) => {\n    try {\n      const response = await api.post('/positions', positionData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar cargo:', error);\n      throw error;\n    }\n  },\n  \n  // Atualizar cargo\n  updatePosition: async (id, positionData) => {\n    try {\n      const response = await api.put(`/positions/${id}`, positionData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar cargo:', error);\n      throw error;\n    }\n  },\n  \n  // Excluir cargo\n  deletePosition: async (id) => {\n    try {\n      const response = await api.delete(`/positions/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir cargo:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de movimentações\nexport const movementService = {\n  // Listar movimentações\n  getMovements: async (filters = {}) => {\n    try {\n      const response = await api.get('/movements', { params: filters });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar movimentações:', error);\n      throw error;\n    }\n  },\n  \n  // Obter movimentação por ID\n  getMovementById: async (id) => {\n    try {\n      const response = await api.get(`/movements/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar movimentação:', error);\n      throw error;\n    }\n  },\n  \n  // Criar movimentação\n  createMovement: async (movementData) => {\n    try {\n      const response = await api.post('/movements', movementData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar movimentação:', error);\n      throw error;\n    }\n  },\n  \n  // Atualizar movimentação\n  updateMovement: async (id, movementData) => {\n    try {\n      const response = await api.put(`/movements/${id}`, movementData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar movimentação:', error);\n      throw error;\n    }\n  },\n  \n  // Excluir movimentação\n  deleteMovement: async (id) => {\n    try {\n      const response = await api.delete(`/movements/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir movimentação:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de tabelas salariais\nexport const salaryTableService = {\n  // Listar tabelas salariais\n  getSalaryTables: async () => {\n    try {\n      const response = await api.get('/salary-tables');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar tabelas salariais:', error);\n      throw error;\n    }\n  },\n  \n  // Obter tabela salarial por ID\n  getSalaryTableById: async (id) => {\n    try {\n      const response = await api.get(`/salary-tables/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar tabela salarial:', error);\n      throw error;\n    }\n  },\n  \n  // Criar tabela salarial\n  createSalaryTable: async (salaryTableData) => {\n    try {\n      const response = await api.post('/salary-tables', salaryTableData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao criar tabela salarial:', error);\n      throw error;\n    }\n  },\n  \n  // Atualizar tabela salarial\n  updateSalaryTable: async (id, salaryTableData) => {\n    try {\n      const response = await api.put(`/salary-tables/${id}`, salaryTableData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao atualizar tabela salarial:', error);\n      throw error;\n    }\n  },\n  \n  // Excluir tabela salarial\n  deleteSalaryTable: async (id) => {\n    try {\n      const response = await api.delete(`/salary-tables/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao excluir tabela salarial:', error);\n      throw error;\n    }\n  }\n};\n\n// Serviços de dashboard\nexport const dashboardService = {\n  // Obter estatísticas gerais\n  getStats: async () => {\n    try {\n      const response = await api.get('/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar estatísticas do dashboard:', error);\n      throw error;\n    }\n  },\n  \n  // Obter distribuição por departamento\n  getDepartmentDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/department-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por departamento:', error);\n      throw error;\n    }\n  },\n  \n  // Obter distribuição por cargo\n  getPositionDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/position-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por cargo:', error);\n      throw error;\n    }\n  },\n  \n  // Obter distribuição por modalidade de trabalho\n  getWorkModeDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/workmode-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por modalidade de trabalho:', error);\n      throw error;\n    }\n  },\n  \n  // Obter distribuição por carga horária\n  getWorkloadDistribution: async () => {\n    try {\n      const response = await api.get('/dashboard/workload-distribution');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar distribuição por carga horária:', error);\n      throw error;\n    }\n  },\n  \n  // Obter histórico de movimentações\n  getMovementHistory: async (meses = 12) => {\n    try {\n      const response = await api.get('/dashboard/movement-history', { params: { meses } });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar histórico de movimentações:', error);\n      throw error;\n    }\n  },\n  \n  // Obter análise salarial\n  getSalaryAnalysis: async () => {\n    try {\n      const response = await api.get('/dashboard/salary-analysis');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao carregar dados do dashboard:', error);\n      throw error;\n    }\n  },\n  \n  // Obter comparativo de orçamento\n  getBudgetComparison: async () => {\n    try {\n      const response = await api.get('/dashboard/budget-comparison');\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar comparativo de orçamento:', error);\n      throw error;\n    }\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}